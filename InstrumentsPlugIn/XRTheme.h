//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

@class DVTTheme, NSBundle, NSColor, NSDictionary, NSFont, NSGradient, NSImage, NSMutableDictionary, NSMutableOrderedSet;

@interface XRTheme : NSObject
{
    NSBundle *_bundle;
    NSMutableDictionary *_allColorsMap;
    NSMutableOrderedSet *_allColorNames;
    NSMutableDictionary *_allImagesMap;
    struct vector<NSColor *__unsafe_unretained, std::__1::allocator<NSColor *__unsafe_unretained>> _colorByNumber;
    struct vector<NSColor *__unsafe_unretained, std::__1::allocator<NSColor *__unsafe_unretained>> _highlightColorByNumber;
    struct vector<NSColor *__unsafe_unretained, std::__1::allocator<NSColor *__unsafe_unretained>> _primaryColorByNumber;
    struct vector<NSColor *__unsafe_unretained, std::__1::allocator<NSColor *__unsafe_unretained>> _primaryHighlightColorByNumber;
    struct vector<NSColor *__unsafe_unretained, std::__1::allocator<NSColor *__unsafe_unretained>> _secondaryColorByNumber;
    struct vector<NSColor *__unsafe_unretained, std::__1::allocator<NSColor *__unsafe_unretained>> _textColorByNumber;
    struct vector<NSColor *__unsafe_unretained, std::__1::allocator<NSColor *__unsafe_unretained>> _highlightTextColorByNumber;
    struct vector<NSColor *__unsafe_unretained, std::__1::allocator<NSColor *__unsafe_unretained>> _primaryTextColorByNumber;
    struct vector<NSColor *__unsafe_unretained, std::__1::allocator<NSColor *__unsafe_unretained>> _primaryHighlightTextColorByNumber;
    struct vector<NSColor *__unsafe_unretained, std::__1::allocator<NSColor *__unsafe_unretained>> _secondaryTextColorByNumber;
    struct vector<NSColor *__unsafe_unretained, std::__1::allocator<NSColor *__unsafe_unretained>> _stateColorByNumber;
    struct vector<NSColor *__unsafe_unretained, std::__1::allocator<NSColor *__unsafe_unretained>> _primaryStateColorByNumber;
    struct vector<NSColor *__unsafe_unretained, std::__1::allocator<NSColor *__unsafe_unretained>> _secondaryStateColorByNumber;
    NSColor *_quietColor;
    NSColor *_quietTextColor;
    NSColor *_quietStateColor;
    NSColor *_clearColor;
    NSDictionary *_engineeringTypesPlist;
    NSMutableDictionary *_highlightColorNames;
    NSMutableDictionary *_textColorNames;
    NSMutableDictionary *_stateColorNames;
    NSMutableDictionary *_stateTextColorNames;
    NSMutableDictionary *_highlightTextColorNames;
    NSMutableDictionary *_highlightStateColorNames;
    NSMutableDictionary *_highlightStateTextColorNames;
    struct EngineeringTypeMatchers _colorMatchers;
    struct EngineeringTypeMatchers _textColorMatchers;
    struct EngineeringTypeMatchers _stateColorMatchers;
    struct EngineeringTypeMatchers _stateTextColorMatchers;
    struct EngineeringTypeMatchers _highlightColorMatchers;
    struct EngineeringTypeMatchers _highlightTextColorMatchers;
    struct EngineeringTypeMatchers _highlightStateColorMatchers;
    struct EngineeringTypeMatchers _highlightStateTextColorMatchers;
    struct EngineeringTypeMatchers *_matchersArray[8];
    struct vector<std::__1::unordered_map<NSString *__unsafe_unretained, long long, std::__1::hash<NSString *__unsafe_unretained>, std::__1::equal_to<NSString *__unsafe_unretained>, std::__1::allocator<std::__1::pair<NSString *const __unsafe_unretained, long long>>>*, std::__1::allocator<std::__1::unordered_map<NSString *__unsafe_unretained, long long, std::__1::hash<NSString *__unsafe_unretained>, std::__1::equal_to<NSString *__unsafe_unretained>, std::__1::allocator<std::__1::pair<NSString *const __unsafe_unretained, long long>>>*>> _priorityExactStringMatchers;
    struct vector<std::__1::unordered_map<unsigned long long, long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, long long>>>*, std::__1::allocator<std::__1::unordered_map<unsigned long long, long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, long long>>>*>> _priorityExactNumberMatchers;
    struct vector<XRThemeRangeMatcher<long long>*, std::__1::allocator<XRThemeRangeMatcher<long long>*>> _priorityRangeNumberMatchers;
    struct vector<std::__1::unordered_map<NSString *__unsafe_unretained, NSImage *__unsafe_unretained, std::__1::hash<NSString *__unsafe_unretained>, std::__1::equal_to<NSString *__unsafe_unretained>, std::__1::allocator<std::__1::pair<NSString *const __unsafe_unretained, NSImage *__unsafe_unretained>>>*, std::__1::allocator<std::__1::unordered_map<NSString *__unsafe_unretained, NSImage *__unsafe_unretained, std::__1::hash<NSString *__unsafe_unretained>, std::__1::equal_to<NSString *__unsafe_unretained>, std::__1::allocator<std::__1::pair<NSString *const __unsafe_unretained, NSImage *__unsafe_unretained>>>*>> _imagesExactStringMatchers;
    struct vector<std::__1::unordered_map<unsigned long long, NSImage *__unsafe_unretained, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, NSImage *__unsafe_unretained>>>*, std::__1::allocator<std::__1::unordered_map<unsigned long long, NSImage *__unsafe_unretained, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, NSImage *__unsafe_unretained>>>*>> _imagesExactNumberMatchers;
    struct vector<XRThemeRangeMatcher<NSImage *__unsafe_unretained>*, std::__1::allocator<XRThemeRangeMatcher<NSImage *__unsafe_unretained>*>> _imagesRangeNumberMatchers;
    struct vector<XRThemeEngineeringTypeMetrics, std::__1::allocator<XRThemeEngineeringTypeMetrics>> _columnLayoutByEType;
    NSFont *_smallControlSizedMonospaceFont;
}

+ (id)popUpArrowsImage;
+ (id)imageForHistory:(BOOL)arg1 size:(int)arg2;
+ (id)publicTemplateIcons;
+ (id)flagIconWithName:(id)arg1;
+ (id)flagColorForKey:(id)arg1;
+ (id)flagImageWithColor:(id)arg1 modifiable:(BOOL)arg2;
+ (id)consoleIcon;
+ (id)sourceIcon;
+ (id)snapshotIcon;
+ (id)diagramIcon;
+ (id)outlineIcon;
+ (id)tableIcon;
+ (id)inspectionHeadImage:(int)arg1;
+ (id)coloredIconForSymbolData:(id)arg1;
+ (id)iconForLibraryType:(int)arg1;
+ (id)iconForSymbolString:(id)arg1;
+ (id)classMethodIcon;
+ (id)functionIcon;
+ (id)cpuTrackImage;
+ (id)unPinningImage;
+ (id)pinningImage;
+ (id)imageForShape:(int)arg1 size:(int)arg2;
+ (id)smallImageForUnknownFileItem;
+ (id)imageForUnknownFileItem;
+ (id)smallImageForDualView:(BOOL)arg1;
+ (id)smallImageForCounterpart:(BOOL)arg1;
+ (id)smallImageForXcode;
+ (id)smallImageForDaemonAgent;
+ (id)imageForTerminal;
+ (id)smallImageForTerminal;
+ (id)smallImageForSoftLinkedFolder;
+ (void)drawPathSeparatorInFrame:(struct CGRect)arg1 isActive:(BOOL)arg2 isDemiSize:(BOOL)arg3;
+ (id)inactiveTextColorForGradientStyle:(int)arg1;
+ (id)textColorForGradientStyle:(int)arg1;
+ (id)inactiveInteriorBorderColorForGradientStyle:(int)arg1;
+ (id)interiorBorderColorForGradientStyle:(int)arg1;
+ (id)interiorHighlightColorForGradientStyle:(int)arg1;
+ (id)inactiveBorderColorForGradientStyle:(int)arg1;
+ (id)borderColorForGradientStyle:(int)arg1;
+ (id)inactiveBackgroundGradientForGradientStyle:(int)arg1;
+ (id)backgroundGradientForGradientStyle:(int)arg1;
+ (id)currentTheme;
+ (id)instrumentDefaultTouchBarImage;
+ (id)instrumentDefaultImage;
+ (id)imageForFile:(id)arg1;
+ (id)imageForApplication:(id)arg1;
+ (id)menuImageForApplication:(id)arg1;
+ (id)menuImageForPid:(int)arg1;
+ (id)searchBundlesForImageNamed:(id)arg1;
+ (id)imageNamed:(id)arg1 fromBundleForClass:(Class)arg2;
+ (id)imageNamed:(id)arg1 forBundle:(id)arg2;
+ (id)_imageNamed:(id)arg1 forBundle:(id)arg2 allowWarning:(BOOL)arg3;
+ (id)templateImageNamed:(id)arg1;
+ (id)imageNamed:(id)arg1;
+ (BOOL)imageNamedExists:(id)arg1;
+ (BOOL)imageNamed:(id)arg1 existsInBundle:(id)arg2;
+ (id)setColor:(id)arg1 ofTemplateImage:(id)arg2;
+ (id)resourceBundle;
- (id).cxx_construct;
- (void).cxx_destruct;
- (double)widthForType:(unsigned short)arg1;
- (id)smallSolidLollipopWithColor:(id)arg1;
- (id)smallLollipopWithColor:(id)arg1;
- (id)solidLollipopContainingImage:(id)arg1 withColor:(id)arg2;
- (id)lollipopContainingImage:(id)arg1 withColor:(id)arg2;
- (id)connectionArrowsForColorName:(id)arg1;
- (id)imageForType:(unsigned short)arg1;
- (id)imageForType:(unsigned short)arg1 value:(id)arg2;
- (id)textSecondaryColors;
- (id)textPrimaryColors;
- (id)highlightTextColors;
- (id)textColors;
- (id)secondaryColors;
- (id)primaryColors;
- (id)highlightColors;
- (id)colors;
- (id)fullColorPalette;
- (id)clearColor;
- (id)quietStateColor;
- (id)quietTextColor;
- (id)quietColor;
- (id)secondaryTextColorByNumber:(unsigned long long)arg1;
- (id)primaryTextColorByNumber:(unsigned long long)arg1;
- (id)textColorByNumber:(unsigned long long)arg1;
- (id)fullTextColorByNumber:(unsigned long long)arg1;
- (id)secondaryColorByNumber:(unsigned long long)arg1;
- (id)primaryColorByNumber:(unsigned long long)arg1;
- (id)colorByNumber:(unsigned long long)arg1;
- (id)fullColorPaletteByNumber:(unsigned long long)arg1;
- (id)colorForType:(unsigned short)arg1 value:(id)arg2 modifier:(unsigned long long)arg3;
- (id)colorForType:(unsigned short)arg1 modifier:(unsigned long long)arg2;
- (id)colorNameForType:(unsigned short)arg1 value:(id)arg2 modifier:(unsigned long long)arg3;
- (id)colorNameForType:(unsigned short)arg1 modifier:(unsigned long long)arg2;
- (id)nameForColor:(id)arg1;
- (id)baseNameForColor:(id)arg1;
- (id)highlightStateTextColorByName:(id)arg1;
- (id)highlightStateColorByName:(id)arg1;
- (id)highlightTextColorByName:(id)arg1;
- (id)highlightColorByName:(id)arg1;
- (id)stateTextColorByName:(id)arg1;
- (id)stateColorByName:(id)arg1;
- (id)textColorByName:(id)arg1;
- (id)colorByName:(id)arg1;
- (id)highlightStateColorNameForType:(unsigned short)arg1 value:(id)arg2;
- (id)highlightTextColorNameForType:(unsigned short)arg1 value:(id)arg2;
- (id)highlightColorNameForType:(unsigned short)arg1 value:(id)arg2;
- (id)stateColorNameForType:(unsigned short)arg1 value:(id)arg2;
- (id)textColorNameForType:(unsigned short)arg1 value:(id)arg2;
- (id)colorNameForType:(unsigned short)arg1 value:(id)arg2;
- (BOOL)priority:(long long *)arg1 forType:(unsigned short)arg2 value:(id)arg3;
- (id)monospaceFontWithControlSize:(unsigned long long)arg1;
- (id)monospaceFont;
- (void)_prepareMetricsForEngineeringTypes;
- (void)_prepareColorsForLegacyUse;
- (id)getRetainedImageFor:(id)arg1;
- (id)getRetainedHighlightStateTextColorNameFor:(id)arg1;
- (id)getRetainedHighlightStateColorNameFor:(id)arg1;
- (id)getRetainedStateTextColorNameFor:(id)arg1;
- (id)getRetainedStateColorNameFor:(id)arg1;
- (id)getRetainedHighlightTextColorNameFor:(id)arg1;
- (id)getRetainedTextColorNameFor:(id)arg1;
- (id)getRetainedHighlightColorNameFor:(id)arg1;
@property(readonly) NSImage *virtualMemoryEventImage;
@property(readonly) NSImage *systemCallEventImage;
@property(readonly) NSImage *traceTemplateImage;
@property(readonly) NSImage *appExtensionImage;
@property(readonly) NSImage *watchKitImage;
@property(readonly) NSImage *XPCServiceImage;
@property(readonly) NSGradient *active1Gradient;
@property(readonly) NSGradient *inactiveGradient;
@property(readonly) NSGradient *buttonSeparatorGradient;
@property(readonly) NSGradient *pathSeparatorGradientInactive;
@property(readonly) NSGradient *pathSeparatorGradient;
@property(readonly) NSColor *inactiveColor;
@property(readonly) NSColor *active1Color;
@property(readonly) NSColor *blackColor;
@property(readonly) double pathSeparatorWidth;
- (id)selectedTrackBackgroundColor;
- (id)trackBackgroundColor;
@property(readonly) NSColor *activityViewScrollingTextFieldTextColorInactive;
@property(readonly) NSColor *activityViewScrollingTextFieldTextColorActive;
@property(readonly) NSColor *inspectorAreaButtonBarBackgroundColor;
@property(readonly) NSColor *stroke5Color;
@property(readonly) NSColor *stroke4Color;
@property(readonly) NSColor *stroke3Color;
@property(readonly) NSColor *stroke2Color;
@property(readonly) NSColor *stroke1Color;
@property(readonly) NSImage *glassBarGearImage;
@property(readonly) DVTTheme *currentDVTTheme;
- (id)init;
- (void)_createHighlightColors;
- (void)_createStateTextColors;

@end

