//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CGFunctionCallbacks {
    unsigned int _field1;
    CDUnknownFunctionPointerType _field2;
    CDUnknownFunctionPointerType _field3;
};

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    double width;
    double height;
};

struct DataRepresentationSubstitutions {
    struct __CFDictionary *_field1;
    unsigned int _field2;
    unsigned int _field3;
    void **_field4;
    void **_field5;
    unsigned int _field6;
    char *_field7;
    Class _field8;
    int _field9;
    void *_field10[1024];
    unsigned int _field11[1024];
};

struct EngineeringTypeMatchers {
    struct vector<std::__1::unordered_map<NSString *__unsafe_unretained, NSString *__unsafe_unretained, std::__1::hash<NSString *__unsafe_unretained>, std::__1::equal_to<NSString *__unsafe_unretained>, std::__1::allocator<std::__1::pair<NSString *const __unsafe_unretained, NSString *__unsafe_unretained>>>*, std::__1::allocator<std::__1::unordered_map<NSString *__unsafe_unretained, NSString *__unsafe_unretained, std::__1::hash<NSString *__unsafe_unretained>, std::__1::equal_to<NSString *__unsafe_unretained>, std::__1::allocator<std::__1::pair<NSString *const __unsafe_unretained, NSString *__unsafe_unretained>>>*>> exactStringMatchers;
    struct vector<std::__1::unordered_map<unsigned long long, NSString *__unsafe_unretained, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, NSString *__unsafe_unretained>>>*, std::__1::allocator<std::__1::unordered_map<unsigned long long, NSString *__unsafe_unretained, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, NSString *__unsafe_unretained>>>*>> exactNumberMatchers;
    struct vector<XRThemeRangeMatcher<NSString *__unsafe_unretained>*, std::__1::allocator<XRThemeRangeMatcher<NSString *__unsafe_unretained>*>> rangeNumberMatchers;
};

struct FormulaEntry {
    unsigned long long _field1;
    union {
        double _field1;
        unsigned long long _field2;
        unsigned long long _field3;
    } _field2;
};

struct NSArray {
    Class _field1;
};

struct NSObject {
    Class _field1;
};

struct NSString {
    Class _field1;
};

struct PFTEvent {
    unsigned long long _field1;
    unsigned long long _field2;
    unsigned long long _field3;
    unsigned long long _field4;
};

struct TFPPidWatcher {
    unsigned int clientPort;
};

struct XRAnalysisCoreInspectionCursorElement;

struct XRBacktraceFragment {
    unsigned int processIID;
    int contentType;
    union {
        struct XRUInt64Array asImpl;
        struct XRStoredUInt64Array asStored;
    } content;
};

struct XRLineNumData {
    unsigned long long _field1;
    unsigned int _field2;
    unsigned int _field3;
};

struct XRSQLSchemaColumn {
    int _field1;
    char *_field2;
};

struct XRSQLTableDefinition {
    struct __CFString *_field1;
    unsigned char _field2;
    struct XRSQLSchemaColumn _field3[0];
};

struct XRStoredUInt64Array {
    struct XRUInt64Array array;
    union XRStoredValue storedValue;
};

struct XRThemeEngineeringTypeMetrics;

struct XRThemeRangeMatcher<NSImage *__unsafe_unretained>;

struct XRThemeRangeMatcher<NSString *__unsafe_unretained>;

struct XRThemeRangeMatcher<long long>;

struct XRTimeRange {
    unsigned long long start;
    unsigned long long length;
};

struct XRUInt64Array {
    unsigned long long *values;
    unsigned int count;
};

struct _CSArchitecture {
    int cpu_type;
    int cpu_subtype;
};

struct _CSRange {
    unsigned long long location;
    unsigned long long length;
};

struct _CSTypeRef {
    unsigned long long _opaque_1;
    unsigned long long _opaque_2;
};

struct _ExtraColumnInfo {
    int _field1;
    unsigned int _field2;
    unsigned int _field3;
};

struct _NSRange {
    unsigned long long _field1;
    unsigned long long _field2;
};

struct _XRDSYMObserverID {
    unsigned int _field1;
    unsigned int _field2;
    CDUnknownBlockType _field3;
};

struct _XRDeviceTimeInfo {
    unsigned long long bootEpoch;
    unsigned long long mach_absolute_start;
    struct mach_timebase_info mach_time_base;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_CPPRawBacktrace, unsigned long>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_CPPRawBacktrace, unsigned long>, void *>*> *__next_;
};

struct _opaque_pthread_mutex_t {
    long long __sig;
    char __opaque[56];
};

struct _opaque_pthread_rwlock_t {
    long long __sig;
    char __opaque[192];
};

struct mach_timebase_info {
    unsigned int numer;
    unsigned int denom;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_CPPRawBacktrace, unsigned long>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_CPPRawBacktrace, unsigned long>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_CPPRawBacktrace, unsigned long>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_CPPRawBacktrace, unsigned long>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_CPPRawBacktrace, unsigned long>, void *>*> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_CPPRawBacktrace, unsigned long>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_CPPRawBacktrace, unsigned long>, void *>*>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unordered_map<NSString *__unsafe_unretained, NSImage *__unsafe_unretained, std::__1::hash<NSString *__unsafe_unretained>, std::__1::equal_to<NSString *__unsafe_unretained>, std::__1::allocator<std::__1::pair<NSString *const __unsafe_unretained, NSImage *__unsafe_unretained>>>;

struct unordered_map<NSString *__unsafe_unretained, NSString *__unsafe_unretained, std::__1::hash<NSString *__unsafe_unretained>, std::__1::equal_to<NSString *__unsafe_unretained>, std::__1::allocator<std::__1::pair<NSString *const __unsafe_unretained, NSString *__unsafe_unretained>>>;

struct unordered_map<NSString *__unsafe_unretained, long long, std::__1::hash<NSString *__unsafe_unretained>, std::__1::equal_to<NSString *__unsafe_unretained>, std::__1::allocator<std::__1::pair<NSString *const __unsafe_unretained, long long>>>;

struct unordered_map<_CPPRawBacktrace, unsigned long, std::__1::hash<_CPPRawBacktrace>, std::__1::equal_to<_CPPRawBacktrace>, std::__1::allocator<std::__1::pair<const _CPPRawBacktrace, unsigned long>>> {
    struct __hash_table<std::__1::__hash_value_type<_CPPRawBacktrace, unsigned long>, std::__1::__unordered_map_hasher<_CPPRawBacktrace, std::__1::__hash_value_type<_CPPRawBacktrace, unsigned long>, std::__1::hash<_CPPRawBacktrace>, true>, std::__1::__unordered_map_equal<_CPPRawBacktrace, std::__1::__hash_value_type<_CPPRawBacktrace, unsigned long>, std::__1::equal_to<_CPPRawBacktrace>, true>, std::__1::allocator<std::__1::__hash_value_type<_CPPRawBacktrace, unsigned long>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_CPPRawBacktrace, unsigned long>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_CPPRawBacktrace, unsigned long>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_CPPRawBacktrace, unsigned long>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_CPPRawBacktrace, unsigned long>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_CPPRawBacktrace, unsigned long>, void *>*> __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<_CPPRawBacktrace, std::__1::__hash_value_type<_CPPRawBacktrace, unsigned long>, std::__1::hash<_CPPRawBacktrace>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<_CPPRawBacktrace, std::__1::__hash_value_type<_CPPRawBacktrace, unsigned long>, std::__1::equal_to<_CPPRawBacktrace>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unordered_map<unsigned long long, NSImage *__unsafe_unretained, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, NSImage *__unsafe_unretained>>>;

struct unordered_map<unsigned long long, NSString *__unsafe_unretained, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, NSString *__unsafe_unretained>>>;

struct unordered_map<unsigned long long, long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, long long>>>;

struct vector<NSColor *__unsafe_unretained, std::__1::allocator<NSColor *__unsafe_unretained>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<NSColor *__unsafe_unretained *, std::__1::allocator<NSColor *__unsafe_unretained>> {
        id *__first_;
    } __end_cap_;
};

struct vector<XRAnalysisCoreInspectionCursorElement, std::__1::allocator<XRAnalysisCoreInspectionCursorElement>> {
    struct XRAnalysisCoreInspectionCursorElement *__begin_;
    struct XRAnalysisCoreInspectionCursorElement *__end_;
    struct __compressed_pair<XRAnalysisCoreInspectionCursorElement *, std::__1::allocator<XRAnalysisCoreInspectionCursorElement>> {
        struct XRAnalysisCoreInspectionCursorElement *__first_;
    } __end_cap_;
};

struct vector<XRThemeEngineeringTypeMetrics, std::__1::allocator<XRThemeEngineeringTypeMetrics>> {
    struct XRThemeEngineeringTypeMetrics *__begin_;
    struct XRThemeEngineeringTypeMetrics *__end_;
    struct __compressed_pair<XRThemeEngineeringTypeMetrics *, std::__1::allocator<XRThemeEngineeringTypeMetrics>> {
        struct XRThemeEngineeringTypeMetrics *__first_;
    } __end_cap_;
};

struct vector<XRThemeRangeMatcher<NSImage *__unsafe_unretained>*, std::__1::allocator<XRThemeRangeMatcher<NSImage *__unsafe_unretained>*>> {
    struct XRThemeRangeMatcher<NSImage *__unsafe_unretained> **__begin_;
    struct XRThemeRangeMatcher<NSImage *__unsafe_unretained> **__end_;
    struct __compressed_pair<XRThemeRangeMatcher<NSImage *__unsafe_unretained>**, std::__1::allocator<XRThemeRangeMatcher<NSImage *__unsafe_unretained>*>> {
        struct XRThemeRangeMatcher<NSImage *__unsafe_unretained> **__first_;
    } __end_cap_;
};

struct vector<XRThemeRangeMatcher<NSString *__unsafe_unretained>*, std::__1::allocator<XRThemeRangeMatcher<NSString *__unsafe_unretained>*>> {
    struct XRThemeRangeMatcher<NSString *__unsafe_unretained> **__begin_;
    struct XRThemeRangeMatcher<NSString *__unsafe_unretained> **__end_;
    struct __compressed_pair<XRThemeRangeMatcher<NSString *__unsafe_unretained>**, std::__1::allocator<XRThemeRangeMatcher<NSString *__unsafe_unretained>*>> {
        struct XRThemeRangeMatcher<NSString *__unsafe_unretained> **__first_;
    } __end_cap_;
};

struct vector<XRThemeRangeMatcher<long long>*, std::__1::allocator<XRThemeRangeMatcher<long long>*>> {
    struct XRThemeRangeMatcher<long long> **__begin_;
    struct XRThemeRangeMatcher<long long> **__end_;
    struct __compressed_pair<XRThemeRangeMatcher<long long>**, std::__1::allocator<XRThemeRangeMatcher<long long>*>> {
        struct XRThemeRangeMatcher<long long> **__first_;
    } __end_cap_;
};

struct vector<_XRDSYMObserverID *, std::__1::allocator<_XRDSYMObserverID *>> {
    struct _XRDSYMObserverID **_field1;
    struct _XRDSYMObserverID **_field2;
    struct __compressed_pair<_XRDSYMObserverID **, std::__1::allocator<_XRDSYMObserverID *>> {
        struct _XRDSYMObserverID **_field1;
    } _field3;
};

struct vector<std::__1::unordered_map<NSString *__unsafe_unretained, NSImage *__unsafe_unretained, std::__1::hash<NSString *__unsafe_unretained>, std::__1::equal_to<NSString *__unsafe_unretained>, std::__1::allocator<std::__1::pair<NSString *const __unsafe_unretained, NSImage *__unsafe_unretained>>>*, std::__1::allocator<std::__1::unordered_map<NSString *__unsafe_unretained, NSImage *__unsafe_unretained, std::__1::hash<NSString *__unsafe_unretained>, std::__1::equal_to<NSString *__unsafe_unretained>, std::__1::allocator<std::__1::pair<NSString *const __unsafe_unretained, NSImage *__unsafe_unretained>>>*>> {
    struct unordered_map<NSString *__unsafe_unretained, NSImage *__unsafe_unretained, std::__1::hash<NSString *__unsafe_unretained>, std::__1::equal_to<NSString *__unsafe_unretained>, std::__1::allocator<std::__1::pair<NSString *const __unsafe_unretained, NSImage *__unsafe_unretained>>> **__begin_;
    struct unordered_map<NSString *__unsafe_unretained, NSImage *__unsafe_unretained, std::__1::hash<NSString *__unsafe_unretained>, std::__1::equal_to<NSString *__unsafe_unretained>, std::__1::allocator<std::__1::pair<NSString *const __unsafe_unretained, NSImage *__unsafe_unretained>>> **__end_;
    struct __compressed_pair<std::__1::unordered_map<NSString *__unsafe_unretained, NSImage *__unsafe_unretained, std::__1::hash<NSString *__unsafe_unretained>, std::__1::equal_to<NSString *__unsafe_unretained>, std::__1::allocator<std::__1::pair<NSString *const __unsafe_unretained, NSImage *__unsafe_unretained>>>**, std::__1::allocator<std::__1::unordered_map<NSString *__unsafe_unretained, NSImage *__unsafe_unretained, std::__1::hash<NSString *__unsafe_unretained>, std::__1::equal_to<NSString *__unsafe_unretained>, std::__1::allocator<std::__1::pair<NSString *const __unsafe_unretained, NSImage *__unsafe_unretained>>>*>> {
        struct unordered_map<NSString *__unsafe_unretained, NSImage *__unsafe_unretained, std::__1::hash<NSString *__unsafe_unretained>, std::__1::equal_to<NSString *__unsafe_unretained>, std::__1::allocator<std::__1::pair<NSString *const __unsafe_unretained, NSImage *__unsafe_unretained>>> **__first_;
    } __end_cap_;
};

struct vector<std::__1::unordered_map<NSString *__unsafe_unretained, NSString *__unsafe_unretained, std::__1::hash<NSString *__unsafe_unretained>, std::__1::equal_to<NSString *__unsafe_unretained>, std::__1::allocator<std::__1::pair<NSString *const __unsafe_unretained, NSString *__unsafe_unretained>>>*, std::__1::allocator<std::__1::unordered_map<NSString *__unsafe_unretained, NSString *__unsafe_unretained, std::__1::hash<NSString *__unsafe_unretained>, std::__1::equal_to<NSString *__unsafe_unretained>, std::__1::allocator<std::__1::pair<NSString *const __unsafe_unretained, NSString *__unsafe_unretained>>>*>> {
    struct unordered_map<NSString *__unsafe_unretained, NSString *__unsafe_unretained, std::__1::hash<NSString *__unsafe_unretained>, std::__1::equal_to<NSString *__unsafe_unretained>, std::__1::allocator<std::__1::pair<NSString *const __unsafe_unretained, NSString *__unsafe_unretained>>> **__begin_;
    struct unordered_map<NSString *__unsafe_unretained, NSString *__unsafe_unretained, std::__1::hash<NSString *__unsafe_unretained>, std::__1::equal_to<NSString *__unsafe_unretained>, std::__1::allocator<std::__1::pair<NSString *const __unsafe_unretained, NSString *__unsafe_unretained>>> **__end_;
    struct __compressed_pair<std::__1::unordered_map<NSString *__unsafe_unretained, NSString *__unsafe_unretained, std::__1::hash<NSString *__unsafe_unretained>, std::__1::equal_to<NSString *__unsafe_unretained>, std::__1::allocator<std::__1::pair<NSString *const __unsafe_unretained, NSString *__unsafe_unretained>>>**, std::__1::allocator<std::__1::unordered_map<NSString *__unsafe_unretained, NSString *__unsafe_unretained, std::__1::hash<NSString *__unsafe_unretained>, std::__1::equal_to<NSString *__unsafe_unretained>, std::__1::allocator<std::__1::pair<NSString *const __unsafe_unretained, NSString *__unsafe_unretained>>>*>> {
        struct unordered_map<NSString *__unsafe_unretained, NSString *__unsafe_unretained, std::__1::hash<NSString *__unsafe_unretained>, std::__1::equal_to<NSString *__unsafe_unretained>, std::__1::allocator<std::__1::pair<NSString *const __unsafe_unretained, NSString *__unsafe_unretained>>> **__first_;
    } __end_cap_;
};

struct vector<std::__1::unordered_map<NSString *__unsafe_unretained, long long, std::__1::hash<NSString *__unsafe_unretained>, std::__1::equal_to<NSString *__unsafe_unretained>, std::__1::allocator<std::__1::pair<NSString *const __unsafe_unretained, long long>>>*, std::__1::allocator<std::__1::unordered_map<NSString *__unsafe_unretained, long long, std::__1::hash<NSString *__unsafe_unretained>, std::__1::equal_to<NSString *__unsafe_unretained>, std::__1::allocator<std::__1::pair<NSString *const __unsafe_unretained, long long>>>*>> {
    struct unordered_map<NSString *__unsafe_unretained, long long, std::__1::hash<NSString *__unsafe_unretained>, std::__1::equal_to<NSString *__unsafe_unretained>, std::__1::allocator<std::__1::pair<NSString *const __unsafe_unretained, long long>>> **__begin_;
    struct unordered_map<NSString *__unsafe_unretained, long long, std::__1::hash<NSString *__unsafe_unretained>, std::__1::equal_to<NSString *__unsafe_unretained>, std::__1::allocator<std::__1::pair<NSString *const __unsafe_unretained, long long>>> **__end_;
    struct __compressed_pair<std::__1::unordered_map<NSString *__unsafe_unretained, long long, std::__1::hash<NSString *__unsafe_unretained>, std::__1::equal_to<NSString *__unsafe_unretained>, std::__1::allocator<std::__1::pair<NSString *const __unsafe_unretained, long long>>>**, std::__1::allocator<std::__1::unordered_map<NSString *__unsafe_unretained, long long, std::__1::hash<NSString *__unsafe_unretained>, std::__1::equal_to<NSString *__unsafe_unretained>, std::__1::allocator<std::__1::pair<NSString *const __unsafe_unretained, long long>>>*>> {
        struct unordered_map<NSString *__unsafe_unretained, long long, std::__1::hash<NSString *__unsafe_unretained>, std::__1::equal_to<NSString *__unsafe_unretained>, std::__1::allocator<std::__1::pair<NSString *const __unsafe_unretained, long long>>> **__first_;
    } __end_cap_;
};

struct vector<std::__1::unordered_map<unsigned long long, NSImage *__unsafe_unretained, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, NSImage *__unsafe_unretained>>>*, std::__1::allocator<std::__1::unordered_map<unsigned long long, NSImage *__unsafe_unretained, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, NSImage *__unsafe_unretained>>>*>> {
    struct unordered_map<unsigned long long, NSImage *__unsafe_unretained, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, NSImage *__unsafe_unretained>>> **__begin_;
    struct unordered_map<unsigned long long, NSImage *__unsafe_unretained, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, NSImage *__unsafe_unretained>>> **__end_;
    struct __compressed_pair<std::__1::unordered_map<unsigned long long, NSImage *__unsafe_unretained, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, NSImage *__unsafe_unretained>>>**, std::__1::allocator<std::__1::unordered_map<unsigned long long, NSImage *__unsafe_unretained, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, NSImage *__unsafe_unretained>>>*>> {
        struct unordered_map<unsigned long long, NSImage *__unsafe_unretained, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, NSImage *__unsafe_unretained>>> **__first_;
    } __end_cap_;
};

struct vector<std::__1::unordered_map<unsigned long long, NSString *__unsafe_unretained, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, NSString *__unsafe_unretained>>>*, std::__1::allocator<std::__1::unordered_map<unsigned long long, NSString *__unsafe_unretained, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, NSString *__unsafe_unretained>>>*>> {
    struct unordered_map<unsigned long long, NSString *__unsafe_unretained, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, NSString *__unsafe_unretained>>> **__begin_;
    struct unordered_map<unsigned long long, NSString *__unsafe_unretained, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, NSString *__unsafe_unretained>>> **__end_;
    struct __compressed_pair<std::__1::unordered_map<unsigned long long, NSString *__unsafe_unretained, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, NSString *__unsafe_unretained>>>**, std::__1::allocator<std::__1::unordered_map<unsigned long long, NSString *__unsafe_unretained, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, NSString *__unsafe_unretained>>>*>> {
        struct unordered_map<unsigned long long, NSString *__unsafe_unretained, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, NSString *__unsafe_unretained>>> **__first_;
    } __end_cap_;
};

struct vector<std::__1::unordered_map<unsigned long long, long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, long long>>>*, std::__1::allocator<std::__1::unordered_map<unsigned long long, long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, long long>>>*>> {
    struct unordered_map<unsigned long long, long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, long long>>> **__begin_;
    struct unordered_map<unsigned long long, long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, long long>>> **__end_;
    struct __compressed_pair<std::__1::unordered_map<unsigned long long, long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, long long>>>**, std::__1::allocator<std::__1::unordered_map<unsigned long long, long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, long long>>>*>> {
        struct unordered_map<unsigned long long, long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, long long>>> **__first_;
    } __end_cap_;
};

#pragma mark Typedef'd Structures

typedef struct {
    unsigned char byte0;
    unsigned char byte1;
    unsigned char byte2;
    unsigned char byte3;
    unsigned char byte4;
    unsigned char byte5;
    unsigned char byte6;
    unsigned char byte7;
    unsigned char byte8;
    unsigned char byte9;
    unsigned char byte10;
    unsigned char byte11;
    unsigned char byte12;
    unsigned char byte13;
    unsigned char byte14;
    unsigned char byte15;
} CDStruct_e6eac3cb;

typedef struct {
    unsigned long long _field1;
    id _field2[1];
} CDStruct_1b81fc1c;

typedef struct {
    unsigned long long _field1;
    id *_field2;
    unsigned long long *_field3;
    unsigned long long _field4[5];
} CDStruct_70511ce9;

typedef struct {
    int _field1;
    int _field2;
    void *_field3[3];
} CDStruct_a94d320b;

#pragma mark Named Unions

union XRBookmark {
    struct {
        unsigned int :62;
        unsigned int :2;
    } _field1;
    unsigned long long _field2;
};

union XRStoredValue {
    unsigned int uint32;
    unsigned long long uint64;
    unsigned int iid;
};

union _flagTableFilter_u {
    unsigned int value;
    struct _flagTableFilter {
        unsigned int user:1;
        unsigned int dtrace:1;
        unsigned int signal:1;
        unsigned int zombie:1;
        unsigned int warning:1;
        unsigned int error:1;
        unsigned int alloc:1;
        unsigned int objgraph:1;
        unsigned int symsrc:1;
        unsigned int generation:1;
        unsigned int time:1;
        unsigned int :21;
    } filter;
};

